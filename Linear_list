ADT List{

  InitList(&L)
  
  DestoryList(&L)
  
  ClearList(&L)
  
  ListEmpty(L)
  
  ListLength(L)
  
  GetElem(L,i,&e)
  
  LocateElem(L,e,compare())
  
  PriorElem(L,cur_e,&pre_e)
  
  NextElem(L,cur_e,&next_e)
  
  ListInsert(&L,i,e)
  
  ListDelete(&L,i,&e)
  
  ListTraverse(L,visit())
  
  }ADT List
  
//合并两个线性表
  
  void union(List &La,List Lb){
    //将所有在线性表LB中但不在线性表LA中的元素插入到LA中
    La_len=ListLength(La);
    Lb_len=ListLength(Lb);
    for(i=1;i<=Lb;i++){
      GetElem(Lb,i,e);
      if(!LocateElem(La,e,equal))
        ListInsert(La,++La_len,e);
     }
   }//union
   
 // 合并两个线性表并且按顺序排列
 
  void MergeList(List La,List Lb,List &Lc){
    InitList(Lc);
    i=j=1;
    k=0;
    La_len=ListLength(La);
    Lb_len=ListLength(Lb);
    while(i<=La_len)&&(j<=Lb_len){
      GetElem(La,i,ai);
      GetElem(Lb,j,bj);
      if(ai<bi){
        ListInsert(Lc,++k,ai);++i;}
      else{
        ListInsert(Lc,++k,bi);++i}
      }
     while(i<=La_len){
      GetElem(La,i++,ai);ListInsert(Lc,++k,ai);}
     while(i<=Lb_len){
      GetElem(Lb,i++,bi);ListInsert(Lc,++k,bi);}
  }//MergeList
  
  //线性表的动态分配顺序存储结构
  #define LIST_INIT_SIZE  100
  #define LISTINCREMENT 10  
  typedef struct{
    ElemType *elem; //存储空间基址
    int length; //当前长度
    int listsize; //当前分配的存储容量
  }SqList;

  Status InitList_Sq(SqList &L){
    //构建一个空的线性表L。
    L.elem = (ElemType *)malloc(LIST_INIT_SIZE*sizeof(Elemtype));
    if(!L.elem)exit(OVERFLOW);  //存储分配失败
    L.length = 0; //空表长度为0
    L.listsize = LIST_INIT_SIZE; //初始存储容量
    return OK;
  }//InitList_Sq
  
  
  //在顺序线性表L中的第I个位置之前插入新的元素E
  Status ListInsert_Sq(Sqlist &L,int i,ElemType e){
    if(i<1||i>L.length+1) return ERROR; //I值不合法
    if(L.length>=L.listsize){ //当前存储空间已满，增加分配
      newbase = (ElemType*)realloc(L.elem,(L.listsize+LISTINCREMENT)*sizeof(ElemType));
      if(!newbase)  exit(OVERFLOW); //存储分配失败
      L.elem = newbase; //新基址
      L.listsize +=LISTINCREMENT; //增加存储容量
    }
    q=&(L.elem[i-1]); //Q为插入位置
    for(p=&(L.elem[L.length-1]);p>=q;--p;) *(p+1)=*p; //插入位置及之后的元素右移
    *q = e; //插入E
    ++L.length; //表长增1
    return OK;
  }//ListInsert_Sq


  //在线性表中删除元素
  Status ListDelete_Sq(SqList &L,int i,Elemtype &e){
    if((i<1)||(i>L.length))  return ERROR;  //I值不合法
    p = &(L.elem[i-1]); //P为删除元素的位置
    e = *p; //被删除元素的值赋给E
    q = L.elem + L.length-1;  //表尾元素的位置
    for(++p;p<=q;++p)  *(p-1)=*p; //被删除元素之后的元素左移
    --L.length; //表长减1
    return OK;
  }//ListDelete_Sq
  
  
  //在顺序表中查找第1个值与E满足compare（）的元素的位序
  int LocateElem_Sq(SqList L,ElemType e,Status(*compare)(ElemType,ElemType){
    i = 1;
    p = L.elem;
    while(i <= L.length&&!(*compare)(*p++,e))  ++i;
    if(i<=L.length)   return i;
    else return();
  }//LocateElem_Sq
  
  //顺序表的合并
  void MergeList_Sq(SqList La,SqList Lb,SqList Lc){
    pa = La.elem; pb = Lb.elem;
    Lc.listsize = Lc.length = La.length + Lb.length;
    pc = Lc.elem = (ElemType*)malloc(Lc.listsize*sizeof(ElemType));
    if(!Lc.elem)exit(OVERFLOW);
    pa_last = La.elem + La.length - 1;
    pb_last = Lb.elem + Lb.length - 1;
    while(pa <= pa_last&&pb <= pb_last){  //归并
      if(*pa <= *pb)  *pc++=*pa++;
      else *pc++=*pb++;
    }
    while(pa <= pa_last) *pc++=*pa++;
    while(pb <= pb_last) *pc+==*pb++;
  }//MergeList_Sq
